Docker 

Docker is a container management service.
keywords 
develop, ship and run 
whole idea
developers to easily develop applications, ship them into containers which can then be deployed anywhere.
Features of Docker

reduce the size of development by providing a smaller footprint of the operating system via containers.
With containers, it becomes easier for teams across different units, such as development, QA and Operations to work seamlessly across applications.
You can deploy Docker containers anywhere, on any physical and virtual machines and even on the cloud.
Since Docker containers are pretty lightweight, they are very easily scalable.
Docker has the following components


Docker for
Mac
Linux
Windows 
Docker Engine
used for building Docker images and creating Docker containers.
Docker Hub
registry which is used to host various Docker images.
Docker Compose
define applications using multiple Docker containers.
Docker - Images

In Docker, everything is based on Images. 
An image is a combination of a file system and parameters.

Let’s take an example of the following command in Docker.

docker run hello-world 
The Docker command is specific and tells the Docker program on the Operating System that something needs to be done.
The run command is used to mention that we want to create an instance of an image, which is then called a container.
Finally, "hello-world" represents the image from which the container is made.

Now let’s look at how we can use the CentOS image available in Docker Hub to run CentOS on our Ubuntu machine. We can do this by executing the following command on our Ubuntu machine −
sudo docker run -it centos /bin/bash

We are using the sudo command to ensure that it runs with root access.
Here, centos is the name of the image we want to download from Docker Hub and install on our Ubuntu machine.
─it is used to mention that we want to run in interactive mode.
/bin/bash is used to run the bash shell once CentOS is up and running.

https://www.tutorialspoint.com/docker/images/displaying_docker_images.jpg

TAG − This is used to logically tag images.
Image ID − This is used to uniquely identify the image.
Created − The number of days since the image was created.
Virtual Size − The size of the image.

Images can be downloaded from Docker Hub using the Docker run command. Let’s see in detail how we can do this.
docker run image 
Image − This is the name of the image which is used to run the container.
sudo docker run centos

This command will download the centos image, if it is not already present, and run the OS as a container.
https://www.tutorialspoint.com/docker/images/downloading_docker_images.jpg

You will now see the CentOS Docker image downloaded. Now, if we run the Docker images command to see the list of images on the system, we should be able to see the centos image as well.

https://www.tutorialspoint.com/docker/images/centos.jpg
Removing Docker Images
docker rmi
docker rmi ImageID
ImageID − This is the ID of the image which needs to be removed.
sudo docker rmi 7a86f8ffcb25 

https://www.tutorialspoint.com/docker/images/removing_docker_images.jpg

docker images -q:
This command is used to return only the Image ID’s of the images.
q − It tells the Docker command to return the Image ID’s only.
sudo docker images -q 
https://www.tutorialspoint.com/docker/images/docker_images_q.jpg

docker inspect
details of an image or container.
docker inspect Repository 
Repository − This is the name of the Image.
sudo docker inspect jenkins 
https://www.tutorialspoint.com/docker/images/docker_inspect.jpg

Docker - Containers
Containers are instances of Docker images that can be run using the Docker run command. 
The basic purpose of Docker is to run containers. 

Running a Container
Running of containers is managed with the Docker run command.
To run a container in an interactive mode, first launch the Docker container.
sudo docker run –it centos /bin/bash
 
Ctrl+p and you will return to your OS shell.
You will then be running in the instance of the CentOS system on the Ubuntu server.

Listing of Containers:
docker ps
sudo docker ps
https://www.tutorialspoint.com/docker/images/listing_of_containers.jpg

some more variations of the docker ps command
docker ps -a
─a − It tells the docker ps command to list all of the containers on the system.
sudo docker ps -a 
https://www.tutorialspoint.com/docker/images/docker_ps_a.jpg

docker history
With this command, you can see all the commands that were run with an image via a container.
docker history ImageID 
ImageID − This is the Image ID for which you want to see all the commands that were run against it.
sudo docker history centos
The above command will show all the commands that were run against the centos image.

https://www.tutorialspoint.com/docker/images/docker_history.jpg

Docker - Working with Containers
docker top
docker top ContainerID 
ContainerID − This is the Container ID for which you want to see the top processes.
The output will show the top-level processes within a container.
sudo docker top 9f215ed0b0d3 

https://www.tutorialspoint.com/docker/images/docker_top.jpg

docker stop
This command is used to stop a running container.
docker stop ContainerID 
sudo docker stop 9f215ed0b0d3 
https://www.tutorialspoint.com/docker/images/docker_stop.jpg

docker rm
docker rm ContainerID 
The output will give the ID of the removed container.
sudo docker rm 9f215ed0b0d3 
https://www.tutorialspoint.com/docker/images/docker_rm.jpg

docker stats
provide the statistics of a running container.
docker stats ContainerID 
sudo docker stats 9f215ed0b0d3 
The output will show the CPU and Memory utilization of the Container.
https://www.tutorialspoint.com/docker/images/docker_stats.jpg

docker attach
used to attach to a running container.
docker attach ContainerID 
sudo docker attach 07b0b6f434fe 
The above command will attach to the Docker container 07b0b6f434fe.
https://www.tutorialspoint.com/docker/images/docker_attach.jpg
https://www.tutorialspoint.com/docker/images/docker_attach_container.jpg

docker pause
pause the processes in a running container.
docker pause ContainerID 
sudo docker pause 07b0b6f434fe 

docker unpause ContainerID

sudo docker kill 07b0b6f434fe 
The above command will kill the processes in the running container 07b0b6f434fe.
https://www.tutorialspoint.com/docker/images/docker_kill.jpg

Docker – Container Lifecycle
Created-Running<>Paused<>Stopped-Killed
Initially, the Docker container will be in the created state.

Then the Docker container goes into the running state when the Docker run command is used.
The Docker kill command is used to kill an existing Docker container.
The Docker pause command is used to pause an existing Docker container.
The Docker stop command is used to pause an existing Docker container.
The Docker run command is used to put a container back from a stopped state to a running state.
